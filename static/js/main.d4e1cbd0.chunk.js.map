{"version":3,"sources":["Search.js","images/default-movie-poster.jpg","MovieCard.js","Results.js","Nominations.js","App.js","reportWebVitals.js","index.js"],"names":["Search","getTitle","useState","movieTitle","setMovieTitle","useEffect","id","type","value","onChange","e","target","MovieCard","movie","addOrRemove","list","nominations","className","Title","Year","console","log","Poster","src","defaultImage","alt","href","imdbID","rel","disabled","find","movieObj","onClick","Result","searchInput","results","setResults","totalResults","setTotalResults","page","setPage","length","a","fetch","process","response","json","firstFetch","pageChangeFetch","map","Nominations","alert","App","cookies","Cookies","setSearchInput","setNominations","cookieArray","get","set","path","nomination","listType","newNominations","push","filter","search","Results","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4e1cbd0.chunk.js","sourcesContent":["import './CSS/search.scss'\nimport React, { useState, useEffect } from 'react'\n\n\nfunction Search({ getTitle }) {\n\n    const [movieTitle, setMovieTitle] = useState(\"\")\n\n    const handleInput = (e) => {\n        setMovieTitle(e.target.value)\n    }\n\n    // As search input ('movieInput') changes, send input up to App level\n    useEffect(() => {\n        getTitle(movieTitle)\n    }, [movieTitle])\n\n    return (\n        <div id='search'>\n            <div id='inner-search'>\n                <h2>Movie title</h2>\n                <input id='search-input' type=\"text\" value={movieTitle} onChange={handleInput} />\n            </div>\n        </div>\n    )\n}\n\nexport default Search","export default __webpack_public_path__ + \"static/media/default-movie-poster.cf92e45e.jpg\";","import defaultImage from './images/default-movie-poster.jpg'\n\nfunction MovieCard({ movie, addOrRemove, list, nominations }) {\n\n    // Returns truthy or falsey if the nominations array contains the current movie\n    const inNominations = () => {\n        return !!nominations.find(movieObj => movieObj.imdbID === movie.imdbID)\n    }\n\n    return (\n        // Display a movie's title, year, poster (if one exists) and it's IMDB link\n        <div className='movie-card'>\n            <h4>{movie.Title} ({movie.Year})</h4>\n            {console.log(movie.Poster)}\n            <img src={movie.Poster[0] === 'h' ? movie.Poster : defaultImage} alt={movie.Title} />\n            <br></br>\n            <div className='bottom'>\n                <p>View this movie on IMDB <a href={`https://www.imdb.com/title/${movie.imdbID}/`} target=\"_blank\" rel=\"noreferrer\">here</a>!</p>\n                <button\n                    id={movie.imdbID}\n                    className={list}\n                    disabled={inNominations() && list === 'results'}\n                    onClick={() => {\n                        addOrRemove(movie, list)\n                    }}\n                >\n                    {list === 'results' ? 'Nominate' : 'Remove Nomination'}\n                </button>\n            </div>\n        </div >\n    )\n}\n\nexport default MovieCard\n\n","import React, { useState, useEffect } from 'react'\nimport MovieCard from './MovieCard'\n\nfunction Result({ searchInput, addOrRemove, nominations }) {\n    const API_KEY = process.env.REACT_APP_API_KEY\n\n    const [results, setResults] = useState([])\n    const [totalResults, setTotalResults] = useState(\"\")\n    const [page, setPage] = useState(1)\n\n    // Whenever the search input changes, we do a new fetch request for movie titles that match the input\n    // Movie and total results are both stored in state\n    useEffect(() => {\n        if (searchInput.length) {\n            async function firstFetch() {\n                try {\n                    const response = await fetch(`https://www.omdbapi.com/?s=${searchInput}&type=movie&page=1&apikey=${API_KEY}`)\n                    const json = await response.json()\n                    setTotalResults(json.totalResults)\n                    setResults([...json.Search])\n\n                } catch (err) {\n                    console.log(err)\n                }\n\n            }\n            firstFetch()\n        }\n    }, [searchInput])\n\n    // Fetch for a new page of results as the value of 'page' changes\n    useEffect(() => {\n        if (searchInput.length) {\n            async function pageChangeFetch() {\n                try {\n                    const response = await fetch(`https://www.omdbapi.com/?s=${searchInput}&type=movie&page=${page}&apikey=40281cad`)\n                    const json = await response.json()\n                    setTotalResults(json.totalResults)\n                    setResults([...json.Search])\n                } catch (err) {\n                    console.log(err)\n                }\n            }\n            pageChangeFetch()\n        }\n    }, [page])\n\n    // Maps results of fetch. Each movie to it's own movie card.\n    const mapResults = () => {\n        return results.map(movie => <MovieCard key={movie.imdbID} movie={movie} addOrRemove={addOrRemove} list=\"results\" nominations={nominations} />)\n    }\n\n    // Decides, based on 'page' number, whether or not to render Next and Previous buttons\n    const renderButtons = () => {\n        return (\n            <div id='buttons'>\n                {page > 1 ? <button onClick={() => setPage(page - 1)}>Previous Page</button> : null}\n                {page > 0 && results.length === 10 ? <button onClick={() => setPage(page + 1)}>Next Page</button> : null}\n            </div>\n        )\n    }\n\n    return (\n        <div id='results'>\n            {/* If there is no searh input, promt user to search for a movie */}\n            {/* Print number of results */}\n            <h2>{searchInput ? `${totalResults || 0} results for \"${searchInput}\"` : 'Type a movie title in the above to search for it!'}</h2>\n            <div id='results-list'>\n                {mapResults()}\n            </div>\n            {renderButtons()}\n        </div>\n    )\n}\n\nexport default Result","import React, { useEffect } from 'react'\nimport MovieCard from \"./MovieCard\"\n\nfunction Nominations({ addOrRemove, nominations }) {\n\n    // If the user has nominated 5 movies, alert them...\n    useEffect(() => {\n        if (nominations.length === 5) {\n            alert(\"Congratulations! You have nominated 5 movies! You must really like movies!\")\n        }\n    }, [nominations])\n\n    // Maps 'nominations'. Each movie to it's own movie card.\n    const mapNominations = () => {\n        return nominations.map(movie => <MovieCard key={movie.imdbID} movie={movie} addOrRemove={addOrRemove} list=\"nominations\" nominations={nominations} />)\n    }\n\n    return (\n        <div id='nominations'>\n            <h2>Nominations</h2>\n            {/* If there are no nominations, propmt the user to make one */}\n            {\n                nominations.length ?\n                    <div id='nominations-list'>\n                        {mapNominations()}\n                    </div> :\n                    <h2>You haven't made any nominations yet...</h2>\n            }\n\n\n        </div>\n    )\n}\n\nexport default Nominations","import './App.scss'\nimport './CSS/container.scss';\nimport React, { useState, useEffect } from 'react'\nimport Search from './Search'\nimport Results from './Results'\nimport Nominations from './Nominations'\nimport Cookies from 'universal-cookie';\n\nfunction App() {\n\n  // Create a new cookie\n  const cookies = new Cookies();\n\n\n  const [searchInput, setSearchInput] = useState(\"\")\n  const [nominations, setNominations] = useState([])\n\n  // On app load, nominations state is set either with an array stored in cookies or an empty array\n  useEffect(() => {\n    let cookieArray = cookies.get('nominations') || []\n    cookies.set('nominations', cookieArray, { path: '/' });\n    setNominations(cookies.get('nominations'))\n  }, [])\n\n  const getTitle = (search) => {\n    setSearchInput(search)\n  }\n\n  // Add movie to or remove movie from the nominations bucket depending on it's origin\n  // Also add new nominations array to cookie for storage\n  const addOrRemove = (nomination, listType) => {\n    if (listType === 'results') {\n      let newNominations = [...nominations]\n      newNominations.push(nomination)\n      setNominations(newNominations)\n      cookies.set('nominations', newNominations, { path: '/' });\n    } else if (listType === 'nominations') {\n      let newNominations = [...nominations]\n      newNominations = newNominations.filter(movie => movie.Title !== nomination.Title)\n      setNominations(newNominations)\n      cookies.set('nominations', newNominations, { path: '/' });\n    }\n  }\n\n  return (\n    <div className='App'>\n      <h1> The Shoppies</h1>\n      <Search getTitle={getTitle} />\n      <div id='container'>\n        <Results searchInput={searchInput} addOrRemove={addOrRemove} nominations={nominations} />\n        <Nominations nominations={nominations} addOrRemove={addOrRemove} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
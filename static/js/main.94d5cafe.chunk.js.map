{"version":3,"sources":["Search.js","images/default-movie-poster.jpg","MovieCard.js","Results.js","Nominations.js","App.js","reportWebVitals.js","index.js"],"names":["Search","getTitle","useState","movieTitle","setMovieTitle","useEffect","id","type","value","onChange","e","target","MovieCard","movie","addOrRemove","list","className","Title","Year","console","log","Poster","src","defaultImage","alt","href","imdbID","rel","onClick","buttons","document","querySelectorAll","button","find","btn","disabled","disableOrEnable","Result","searchInput","results","setResults","totalResults","setTotalResults","page","setPage","length","a","fetch","process","response","json","firstFetch","pageChangeFetch","map","Nominations","nominations","alert","App","setSearchInput","setNominations","nomination","listType","newNominations","push","filter","search","Results","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.94d5cafe.chunk.js","sourcesContent":["import './CSS/search.scss'\nimport React, { useState, useEffect } from 'react'\n\n\nfunction Search({ getTitle }) {\n\n    const [movieTitle, setMovieTitle] = useState(\"\")\n\n    const handleInput = (e) => {\n        setMovieTitle(e.target.value)\n    }\n\n    // As search input ('movieInput') changes, send input up to App level\n    useEffect(() => {\n        getTitle(movieTitle)\n    }, [movieTitle])\n\n    return (\n        <div id='search'>\n            <div id='inner-search'>\n                <h2>Movie title</h2>\n                <input id='search-input' type=\"text\" value={movieTitle} onChange={handleInput} />\n            </div>\n        </div>\n    )\n}\n\nexport default Search","export default __webpack_public_path__ + \"static/media/default-movie-poster.cf92e45e.jpg\";","import defaultImage from './images/default-movie-poster.jpg'\n\nfunction MovieCard({ movie, addOrRemove, list }) {\n\n    // Once the nominate button is clicked, find the button on the DOM and disable it\n    const disableOrEnable = () => {\n        let buttons = document.querySelectorAll('.results')\n        let button = [...buttons].find(btn => btn.id === movie.imdbID)\n        if (list === 'results') {\n            button.disabled = true\n        } else if (list === 'nominations') {\n            button.disabled = false\n        }\n    }\n\n    return (\n        // Display a movie's title, year, poster (if one exists) and it's IMDB link\n        <div className='movie-card'>\n            <h4>{movie.Title} ({movie.Year})</h4>\n            {console.log(movie.Poster)}\n            <img src={movie.Poster[0] === 'h' ? movie.Poster : defaultImage} alt={movie.Title} />\n            <br></br>\n            <div className='bottom'>\n                <p>View this movie on IMDB <a href={`https://www.imdb.com/title/${movie.imdbID}/`} target=\"_blank\" rel=\"noreferrer\">here</a>!</p>\n                <button\n                    id={movie.imdbID}\n                    className={list}\n                    onClick={() => {\n                        addOrRemove(movie, list)\n                        disableOrEnable()\n                    }}\n                >\n                    {list === 'results' ? 'Nominate' : 'Remove Nomination'}\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieCard\n\n","import React, { useState, useEffect } from 'react'\nimport MovieCard from './MovieCard'\n\nfunction Result({ searchInput, addOrRemove }) {\n    const API_KEY = process.env.REACT_APP_API_KEY\n\n    const [results, setResults] = useState([])\n    const [totalResults, setTotalResults] = useState(\"\")\n    const [page, setPage] = useState(1)\n\n    // Whenever the search input changes, we do a new fetch request for movie titles that match the input\n    // Movie and total results are both stored in state\n    useEffect(() => {\n        if (searchInput.length) {\n            async function firstFetch() {\n                try {\n                    const response = await fetch(`https://www.omdbapi.com/?s=${searchInput}&type=movie&page=1&apikey=${API_KEY}`)\n                    const json = await response.json()\n                    setTotalResults(json.totalResults)\n                    setResults([...json.Search])\n\n                } catch (err) {\n                    console.log(err)\n                }\n\n            }\n            firstFetch()\n        }\n    }, [searchInput])\n\n    // Fetch for a new page of results as the value of 'page' changes\n    useEffect(() => {\n        if (searchInput.length) {\n            async function pageChangeFetch() {\n                try {\n                    const response = await fetch(`https://www.omdbapi.com/?s=${searchInput}&type=movie&page=${page}&apikey=40281cad`)\n                    const json = await response.json()\n                    setTotalResults(json.totalResults)\n                    setResults([...json.Search])\n                } catch (err) {\n                    console.log(err)\n                }\n            }\n            pageChangeFetch()\n        }\n    }, [page])\n\n    // Maps results of fetch. Each movie to it's own movie card.\n    const mapResults = () => {\n        return results.map(movie => <MovieCard key={movie.imdbID} movie={movie} addOrRemove={addOrRemove} list=\"results\" />)\n    }\n\n    // Decides, based on 'page' number, whether or not to render Next and Previous buttons\n    const renderButtons = () => {\n        return (\n            <div id='buttons'>\n                {page > 1 ? <button onClick={() => setPage(page - 1)}>Previous Page</button> : null}\n                {page > 0 && results.length === 10 ? <button onClick={() => setPage(page + 1)}>Next Page</button> : null}\n            </div>\n        )\n    }\n\n    return (\n        <div id='results'>\n            {/* If there is no searh input, promt user to search for a movie */}\n            {/* Print number of results */}\n            <h2>{searchInput ? `${totalResults || 0} results for \"${searchInput}\"` : 'Type a movie title in the above to search for it!'}</h2>\n            <div id='results-list'>\n                {mapResults()}\n            </div>\n            {renderButtons()}\n        </div>\n    )\n}\n\nexport default Result","import React, { useEffect } from 'react'\nimport MovieCard from \"./MovieCard\"\n\nfunction Nominations({ addOrRemove, nominations }) {\n\n    // If the user has nominated 5 movies, alert them...\n    useEffect(() => {\n        if (nominations.length === 5) {\n            alert(\"Congratulations! You have nominated 5 movies! You must really like movies!\")\n        }\n    }, [nominations])\n\n    // Maps 'nominations'. Each movie to it's own movie card.\n    const mapNominations = () => {\n        return [...nominations].map(movie => <MovieCard key={movie.imdbID} movie={movie} addOrRemove={addOrRemove} list=\"nominations\" />)\n    }\n\n    return (\n        <div id='nominations'>\n            <h2>Nominations</h2>\n            {/* If there are no nominations, propmt the user to make one */}\n            {\n                nominations.length ?\n                    <div id='nominations-list'>\n                        {mapNominations()}\n                    </div> :\n                    <h2>You haven't made any nominations yet...</h2>\n            }\n\n\n        </div>\n    )\n}\n\nexport default Nominations","import './App.scss'\nimport './CSS/container.scss';\nimport React, { useState } from 'react'\nimport Search from './Search'\nimport Results from './Results'\nimport Nominations from './Nominations'\n\nfunction App() {\n\n  const [searchInput, setSearchInput] = useState(\"\")\n  const [nominations, setNominations] = useState([])\n\n  const getTitle = (search) => {\n    setSearchInput(search)\n  }\n\n  // Add movie to or remove movie from the nominations bucket depending on it's origin\n  const addOrRemove = (nomination, listType) => {\n    if (listType === 'results') {\n      let newNominations = [...nominations]\n      newNominations.push(nomination)\n      setNominations(newNominations)\n\n    } else if (listType === 'nominations') {\n      let newNominations = [...nominations]\n      newNominations = newNominations.filter(movie => movie.Title !== nomination.Title)\n      setNominations(newNominations)\n    }\n  }\n\n  return (\n    <div className='App'>\n      <h1> The Shoppies</h1>\n      <Search getTitle={getTitle} />\n      <div id='container'>\n        <Results searchInput={searchInput} addOrRemove={addOrRemove} />\n        <Nominations nominations={nominations} addOrRemove={addOrRemove} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}